// <auto-generated />
using System;
using Club.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Club.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Club.Models.Coach", b =>
                {
                    b.Property<int>("CoachID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachID"));

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.HasKey("CoachID");

                    b.ToTable("Coach", (string)null);

                    b.HasData(
                        new
                        {
                            CoachID = 1,
                            HireDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Wojcik",
                            Name = "Tomasz"
                        },
                        new
                        {
                            CoachID = 2,
                            HireDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nowak",
                            Name = "Barbara"
                        },
                        new
                        {
                            CoachID = 3,
                            HireDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Kowalski",
                            Name = "Bartosz"
                        });
                });

            modelBuilder.Entity("Club.Models.CoachAssignment", b =>
                {
                    b.Property<int>("CoachAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachAssignmentID"));

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<decimal>("Compensation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsLeadCoach")
                        .HasColumnType("bit");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("CoachAssignmentID");

                    b.HasIndex("CoachID");

                    b.HasIndex("SessionID");

                    b.ToTable("CoachAssignment", (string)null);

                    b.HasData(
                        new
                        {
                            CoachAssignmentID = 1,
                            CoachID = 1,
                            Compensation = 100m,
                            IsLeadCoach = true,
                            SessionID = 1
                        },
                        new
                        {
                            CoachAssignmentID = 2,
                            CoachID = 2,
                            Compensation = 120m,
                            IsLeadCoach = false,
                            SessionID = 2
                        },
                        new
                        {
                            CoachAssignmentID = 3,
                            CoachID = 3,
                            Compensation = 150m,
                            IsLeadCoach = true,
                            SessionID = 3
                        },
                        new
                        {
                            CoachAssignmentID = 4,
                            CoachID = 1,
                            Compensation = 100m,
                            IsLeadCoach = true,
                            SessionID = 4
                        },
                        new
                        {
                            CoachAssignmentID = 5,
                            CoachID = 2,
                            Compensation = 120m,
                            IsLeadCoach = false,
                            SessionID = 5
                        });
                });

            modelBuilder.Entity("Club.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentID");

                    b.ToTable("Equipment", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Club.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("SessionId");

                    b.ToTable("Feedback", (string)null);

                    b.HasData(
                        new
                        {
                            FeedbackId = 1,
                            Comment = "Great workout! Very well conducted.",
                            Rating = 5,
                            SessionId = 1
                        },
                        new
                        {
                            FeedbackId = 2,
                            Comment = "Very enjoyable yoga class. Highly recommend!",
                            Rating = 4,
                            SessionId = 3
                        },
                        new
                        {
                            FeedbackId = 3,
                            Comment = "Intense session, I got a good workout.",
                            Rating = 4,
                            SessionId = 2
                        },
                        new
                        {
                            FeedbackId = 4,
                            Comment = "Pilates really helps me stay in shape.",
                            Rating = 5,
                            SessionId = 4
                        },
                        new
                        {
                            FeedbackId = 5,
                            Comment = "Best HIIT class I've ever attended!",
                            Rating = 5,
                            SessionId = 5
                        });
                });

            modelBuilder.Entity("Club.Models.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MaintenanceID");

                    b.HasIndex("EquipmentID");

                    b.ToTable("Maintenance", (string)null);

                    b.HasData(
                        new
                        {
                            MaintenanceID = 1,
                            Description = "Regular maintenance",
                            EquipmentID = 1,
                            MaintenanceDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MaintenanceID = 2,
                            Description = "Weight calibration",
                            EquipmentID = 2,
                            MaintenanceDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MaintenanceID = 3,
                            Description = "Belt replacement",
                            EquipmentID = 1,
                            MaintenanceDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MaintenanceID = 4,
                            Description = "Resistance check",
                            EquipmentID = 3,
                            MaintenanceDate = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MaintenanceID = 5,
                            Description = "Frame inspection",
                            EquipmentID = 4,
                            MaintenanceDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Club.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Member", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "jan.kowalski@com.pl",
                            LastName = "Kowalski",
                            Name = "Jan",
                            Password = "aaa123",
                            RegistrationDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            Email = "anna.nowak@com.pl",
                            LastName = "Nowak",
                            Name = "Anna",
                            Password = "bbb123",
                            RegistrationDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            Email = "piotr.wisniewski@com.pl",
                            LastName = "Wiśniewski",
                            Name = "Piotr",
                            Password = "eee123",
                            RegistrationDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            Email = "katarzyna.wojcik@com.pl",
                            LastName = "Wójcik",
                            Name = "Katarzyna",
                            Password = "fff123",
                            RegistrationDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            Email = "marek.kowalczyk@com.pl",
                            LastName = "Kowalczyk",
                            Name = "Marek",
                            Password = "ggg123",
                            RegistrationDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Club.Models.ProgressCard", b =>
                {
                    b.Property<int>("ProgressCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressCardID"));

                    b.Property<double>("BodyFatPercentage")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<double>("MuscleMass")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ProgressCardID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("ProgressCard", (string)null);

                    b.HasData(
                        new
                        {
                            ProgressCardID = 1,
                            BodyFatPercentage = 15.0,
                            Height = 175.0,
                            MeasurementDate = new DateTime(2024, 6, 25, 23, 45, 31, 30, DateTimeKind.Local).AddTicks(134),
                            MemberID = 1,
                            MuscleMass = 30.0,
                            Weight = 70.0
                        },
                        new
                        {
                            ProgressCardID = 2,
                            BodyFatPercentage = 20.0,
                            Height = 165.0,
                            MeasurementDate = new DateTime(2024, 6, 25, 23, 45, 31, 30, DateTimeKind.Local).AddTicks(182),
                            MemberID = 2,
                            MuscleMass = 25.0,
                            Weight = 65.0
                        },
                        new
                        {
                            ProgressCardID = 3,
                            BodyFatPercentage = 18.0,
                            Height = 180.0,
                            MeasurementDate = new DateTime(2024, 6, 25, 23, 45, 31, 30, DateTimeKind.Local).AddTicks(185),
                            MemberID = 3,
                            MuscleMass = 32.0,
                            Weight = 80.0
                        },
                        new
                        {
                            ProgressCardID = 4,
                            BodyFatPercentage = 22.0,
                            Height = 160.0,
                            MeasurementDate = new DateTime(2024, 6, 25, 23, 45, 31, 30, DateTimeKind.Local).AddTicks(188),
                            MemberID = 4,
                            MuscleMass = 20.0,
                            Weight = 55.0
                        },
                        new
                        {
                            ProgressCardID = 5,
                            BodyFatPercentage = 17.0,
                            Height = 170.0,
                            MeasurementDate = new DateTime(2024, 6, 25, 23, 45, 31, 30, DateTimeKind.Local).AddTicks(190),
                            MemberID = 5,
                            MuscleMass = 28.0,
                            Weight = 75.0
                        });
                });

            modelBuilder.Entity("Club.Models.Section", b =>
                {
                    b.Property<int>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionID"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SectionID");

                    b.ToTable("Section", (string)null);

                    b.HasData(
                        new
                        {
                            SectionID = 1,
                            Desc = "Cardio workouts",
                            Name = "Cardio"
                        },
                        new
                        {
                            SectionID = 2,
                            Desc = "Strength training",
                            Name = "Strength"
                        },
                        new
                        {
                            SectionID = 3,
                            Desc = "Flexibility and stretching",
                            Name = "Flexibility"
                        });
                });

            modelBuilder.Entity("Club.Models.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SectionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TermsAndConditionsID")
                        .HasColumnType("int");

                    b.HasKey("SessionID");

                    b.HasIndex("SectionID");

                    b.ToTable("Session", (string)null);

                    b.HasData(
                        new
                        {
                            SessionID = 1,
                            AvailableSlots = 20,
                            EndTime = new DateTime(2024, 5, 26, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxParticipants = 20,
                            Name = "Morning Cardio",
                            SectionID = 1,
                            StartTime = new DateTime(2024, 5, 26, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TermsAndConditionsID = 1
                        },
                        new
                        {
                            SessionID = 2,
                            AvailableSlots = 15,
                            EndTime = new DateTime(2024, 5, 27, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxParticipants = 15,
                            Name = "Evening Strength",
                            SectionID = 2,
                            StartTime = new DateTime(2024, 5, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TermsAndConditionsID = 2
                        },
                        new
                        {
                            SessionID = 3,
                            AvailableSlots = 15,
                            EndTime = new DateTime(2024, 5, 27, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxParticipants = 15,
                            Name = "Yoga",
                            SectionID = 3,
                            StartTime = new DateTime(2024, 5, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TermsAndConditionsID = 3
                        },
                        new
                        {
                            SessionID = 4,
                            AvailableSlots = 10,
                            EndTime = new DateTime(2024, 5, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxParticipants = 10,
                            Name = "Pilates",
                            SectionID = 1,
                            StartTime = new DateTime(2024, 5, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TermsAndConditionsID = 4
                        },
                        new
                        {
                            SessionID = 5,
                            AvailableSlots = 20,
                            EndTime = new DateTime(2024, 5, 29, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxParticipants = 20,
                            Name = "HIIT",
                            SectionID = 2,
                            StartTime = new DateTime(2024, 5, 29, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TermsAndConditionsID = 5
                        });
                });

            modelBuilder.Entity("Club.Models.SessionEquipment", b =>
                {
                    b.Property<int>("SessionEquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionEquipmentID"));

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("SessionEquipmentID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("SessionID");

                    b.ToTable("SessionEquipment", (string)null);

                    b.HasData(
                        new
                        {
                            SessionEquipmentID = 1,
                            EquipmentID = 1,
                            Quantity = 5,
                            SessionID = 1
                        },
                        new
                        {
                            SessionEquipmentID = 2,
                            EquipmentID = 2,
                            Quantity = 10,
                            SessionID = 2
                        },
                        new
                        {
                            SessionEquipmentID = 3,
                            EquipmentID = 3,
                            Quantity = 15,
                            SessionID = 3
                        },
                        new
                        {
                            SessionEquipmentID = 4,
                            EquipmentID = 4,
                            Quantity = 10,
                            SessionID = 4
                        },
                        new
                        {
                            SessionEquipmentID = 5,
                            EquipmentID = 4,
                            Quantity = 15,
                            SessionID = 5
                        });
                });

            modelBuilder.Entity("Club.Models.SessionReservation", b =>
                {
                    b.Property<int>("SessionReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionReservationID"));

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SessionReservationID");

                    b.HasIndex("MemberID");

                    b.HasIndex("SessionID");

                    b.ToTable("SessionReservation", (string)null);

                    b.HasData(
                        new
                        {
                            SessionReservationID = 1,
                            MemberID = 3,
                            ReservationDate = new DateTime(2024, 5, 26, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionID = 1,
                            Status = 1
                        },
                        new
                        {
                            SessionReservationID = 2,
                            MemberID = 2,
                            ReservationDate = new DateTime(2024, 5, 26, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionID = 3,
                            Status = 1
                        },
                        new
                        {
                            SessionReservationID = 3,
                            MemberID = 1,
                            ReservationDate = new DateTime(2024, 5, 26, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionID = 2,
                            Status = 1
                        },
                        new
                        {
                            SessionReservationID = 4,
                            MemberID = 4,
                            ReservationDate = new DateTime(2024, 5, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionID = 4,
                            Status = 1
                        },
                        new
                        {
                            SessionReservationID = 5,
                            MemberID = 5,
                            ReservationDate = new DateTime(2024, 5, 29, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionID = 5,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Club.Models.TermsAndConditions", b =>
                {
                    b.Property<int>("TermsAndConditionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermsAndConditionsID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("TermsAndConditionsID");

                    b.HasIndex("SessionID")
                        .IsUnique();

                    b.ToTable("TermsAndConditions", (string)null);

                    b.HasData(
                        new
                        {
                            TermsAndConditionsID = 1,
                            Content = "Standard terms and conditions for Morning Cardio. Participants must adhere to all club rules and regulations.",
                            SessionID = 1
                        },
                        new
                        {
                            TermsAndConditionsID = 2,
                            Content = "Standard terms and conditions for Evening Strength. Participants must adhere to all club rules and regulations.",
                            SessionID = 2
                        },
                        new
                        {
                            TermsAndConditionsID = 3,
                            Content = "Standard terms and conditions for Yoga. Participants must adhere to all club rules and regulations.",
                            SessionID = 3
                        },
                        new
                        {
                            TermsAndConditionsID = 4,
                            Content = "Standard terms and conditions for Pilates. Participants must adhere to all club rules and regulations.",
                            SessionID = 4
                        },
                        new
                        {
                            TermsAndConditionsID = 5,
                            Content = "Standard terms and conditions for HIIT. Participants must adhere to all club rules and regulations.",
                            SessionID = 5
                        });
                });

            modelBuilder.Entity("Club.Models.CardioEquipment", b =>
                {
                    b.HasBaseType("Club.Models.Equipment");

                    b.Property<int>("MaxIncline")
                        .HasColumnType("int");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.ToTable("CardioEquipment", (string)null);

                    b.HasData(
                        new
                        {
                            EquipmentID = 1,
                            Brand = "FitBrand",
                            Name = "Treadmill",
                            PurchaseDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxIncline = 15,
                            MaxSpeed = 20
                        },
                        new
                        {
                            EquipmentID = 3,
                            Brand = "Endurance",
                            Name = "Elliptical",
                            PurchaseDate = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxIncline = 10,
                            MaxSpeed = 12
                        });
                });

            modelBuilder.Entity("Club.Models.StrengthEquipment", b =>
                {
                    b.HasBaseType("Club.Models.Equipment");

                    b.Property<int>("MaxWeight")
                        .HasColumnType("int");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StrengthEquipment", (string)null);

                    b.HasData(
                        new
                        {
                            EquipmentID = 2,
                            Brand = "StrongBrand",
                            Name = "Bench Press",
                            PurchaseDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxWeight = 300,
                            MuscleGroup = "Chest"
                        },
                        new
                        {
                            EquipmentID = 4,
                            Brand = "PowerBrand",
                            Name = "Squat Rack",
                            PurchaseDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxWeight = 500,
                            MuscleGroup = "Legs"
                        });
                });

            modelBuilder.Entity("Club.Models.CoachAssignment", b =>
                {
                    b.HasOne("Club.Models.Coach", "Coach")
                        .WithMany("CoachAssignments")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Club.Models.Session", "Session")
                        .WithMany("CoachAssignments")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Club.Models.Feedback", b =>
                {
                    b.HasOne("Club.Models.Session", "Session")
                        .WithMany("Feedbacks")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Club.Models.Maintenance", b =>
                {
                    b.HasOne("Club.Models.Equipment", "Equipment")
                        .WithMany("Maintenances")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Club.Models.ProgressCard", b =>
                {
                    b.HasOne("Club.Models.Member", "Member")
                        .WithOne("ProgressCard")
                        .HasForeignKey("Club.Models.ProgressCard", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Club.Models.Session", b =>
                {
                    b.HasOne("Club.Models.Section", "Section")
                        .WithMany("Sessions")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Club.Models.SessionEquipment", b =>
                {
                    b.HasOne("Club.Models.Equipment", "Equipment")
                        .WithMany("SessionEquipments")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Club.Models.Session", "Session")
                        .WithMany("SessionEquipments")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Club.Models.SessionReservation", b =>
                {
                    b.HasOne("Club.Models.Member", "Member")
                        .WithMany("SessionReservations")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Club.Models.Session", "Session")
                        .WithMany("SessionReservations")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Club.Models.TermsAndConditions", b =>
                {
                    b.HasOne("Club.Models.Session", "Session")
                        .WithOne("TermsAndConditions")
                        .HasForeignKey("Club.Models.TermsAndConditions", "SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Club.Models.CardioEquipment", b =>
                {
                    b.HasOne("Club.Models.Equipment", null)
                        .WithOne()
                        .HasForeignKey("Club.Models.CardioEquipment", "EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Club.Models.StrengthEquipment", b =>
                {
                    b.HasOne("Club.Models.Equipment", null)
                        .WithOne()
                        .HasForeignKey("Club.Models.StrengthEquipment", "EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Club.Models.Coach", b =>
                {
                    b.Navigation("CoachAssignments");
                });

            modelBuilder.Entity("Club.Models.Equipment", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("SessionEquipments");
                });

            modelBuilder.Entity("Club.Models.Member", b =>
                {
                    b.Navigation("ProgressCard")
                        .IsRequired();

                    b.Navigation("SessionReservations");
                });

            modelBuilder.Entity("Club.Models.Section", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Club.Models.Session", b =>
                {
                    b.Navigation("CoachAssignments");

                    b.Navigation("Feedbacks");

                    b.Navigation("SessionEquipments");

                    b.Navigation("SessionReservations");

                    b.Navigation("TermsAndConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
